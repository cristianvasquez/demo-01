var _ = require('lodash');

module.exports = (opts = {}, callback) => {
    return (req, res, next) => {
        var errorDefaults = _.extend({
            code: 400,
            title: 'n/a',
            description: 'n/a'
        }, opts);

        // See here: http://jsonapi.org/examples/
        var buildErrors = (err, recursive) => {
            var error;

            if(_.isString(err)) {
                error = _.extend({}, errorDefaults, {title: err});
            } else if(_.isPlainObject(err)) {
                error = _.extend({}, errorDefaults, err);
            } else if(_.isError(err)) {
                error = _.extend({}, errorDefaults, {title: err.message, code: err.code || 500});
            } else if(_.isArray(err)) {
                error = _.map(err, e => {
                    return buildErrors(e, true);
                });
            } else {
                error = _.extend({}, errorDefaults, {
                    title: 'Invalid parameter passed to "buildErrors"',
                    description: `Object type: ${typeof err} must strictly be a: String, Object, Error, Array.`
                });
            }

            if(!_.isArray(error) && !recursive) error = [error];

            return error;
        };

        res.error = err => {
            var code, errors = buildErrors(err);
            code = ((errors.length === 1) ? _.first(errors).code : 400) || 500;

            res.status(code).json({
                code: code,
                errors: errors
            });

            if(_.isFunction(callback)) callback(err);
        };

        res.validationError = errors => {
            var mapped = _.map(errors, err => {
                return {
                    code: 422,
                    title: 'Invalid request parameter',
                    description: err.msg
                };
            });
            return res.error(mapped);
        };

        next();
    };
};