var chai            = require('chai'),
express             = require('express'),
expect              = chai.expect,
request             = require('supertest'),
expressValidator    = require('express-validator'),
middleware          = require('..');

var app;
describe('API Error Handler', () => {
    beforeEach(() => {
        app = express();
        app.use(expressValidator());
    });

    afterEach(() => {
        app = null;
    });

    describe('should have a `res.error` API method', () => {
        it('that should handle basic string errors', done => {
            app.use(middleware());
            app.use((req, res) => {
                res.error('This is not good');
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(400);
                    expect(body.errors.length).to.be.equal(1);
                    expect(body.errors[0]).to.be.eql({
                        code: 400,
                        title: 'This is not good',
                        description: 'n/a'
                    });
                })
                .expect(400, done);
        });

        it('that should handle basic string errors with custom opts', done => {
            app.use(middleware({
                description: 'This is fake'
            }));
            app.use((req, res) => {
                res.error('This is not good');
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(400);
                    expect(body.errors.length).to.be.equal(1);
                    expect(body.errors[0]).to.be.eql({
                        code: 400,
                        title: 'This is not good',
                        description: 'This is fake'
                    });
                })
                .expect(400, done);
        });

        it('that should handle plain objects', done => {
            app.use(middleware());
            app.use((req, res) => {
                res.error({
                    code: 404,
                    title: 'custom 1',
                    description: 'custom 2'
                });
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(404);
                    expect(body.errors.length).to.be.equal(1);
                    expect(body.errors[0]).to.be.eql({
                        code: 404,
                        title: 'custom 1',
                        description: 'custom 2'
                    });
                })
                .expect(404, done);
        });

        it('that should handle plain errors', done => {
            app.use(middleware());
            app.use((req, res) => {
                res.error(new Error('This is an error'));
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(500);
                    expect(body.errors.length).to.be.equal(1);
                    expect(body.errors[0]).to.be.eql({
                        code: 500,
                        title: 'This is an error',
                        description: 'n/a'
                    });
                })
                .expect(500, done);
        });

        it('that should handle an array of errors', done => {
            app.use(middleware());
            app.use((req, res) => {
                res.error([
                    'This one is a string',
                    {
                        title: 'This one is an object'
                    },
                    new Error('This one is an error')
                ]);
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(400);
                    expect(body.errors.length).to.be.equal(3);
                    expect(body.errors[0]).to.be.eql({
                        code: 400,
                        title: 'This one is a string',
                        description: 'n/a'
                    });
                    expect(body.errors[1]).to.be.eql({
                        code: 400,
                        title: 'This one is an object',
                        description: 'n/a'
                    });
                    expect(body.errors[2]).to.be.eql({
                        code: 500,
                        title: 'This one is an error',
                        description: 'n/a'
                    });
                })
                .expect(400, done);
        });

        it('that should properly handle being sent non-standard params', done => {
            app.use(middleware());
            app.use((req, res) => {
                res.error(44);
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(400);
                    expect(body.errors.length).to.be.equal(1);
                    expect(body.errors[0]).to.be.eql({
                        code: 400,
                        title: 'Invalid parameter passed to "buildErrors"',
                        description: 'Object type: number must strictly be a: String, Object, Error, Array.'
                    });
                })
                .expect(400, done);
        });
    });

    describe('should have a `res.validationError` API method', () => {
        it('that works with `express-validator`', done => {
            app.use(middleware());
            app.use((req, res) => {
                req.checkBody('input', 'Missing input parameter').notEmpty();

                req.getValidationResult()
                    .then(result => {
                        if(!result.isEmpty()) return res.validationError(result.array());
                    })
                    .catch(res.error);
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(422);
                    expect(body.errors.length).to.be.equal(1);
                    expect(body.errors[0]).to.be.eql({
                        code: 422,
                        title: 'Invalid request parameter',
                        description: 'Missing input parameter'
                    });
                })
                .expect(422, done);
        });

        it('that should handle multiple validation errors', done => {
            app.use(middleware());
            app.use((req, res) => {
                req.checkBody('input_1', 'Missing input_1 parameter').notEmpty();
                req.checkBody('input_2', 'Missing input_2 parameter').notEmpty();

                req.getValidationResult()
                    .then(result => {
                        if(!result.isEmpty()) return res.validationError(result.array());
                    })
                    .catch(res.error);
            });

            request(app.listen())
                .get('/')
                .expect(res => {
                    var body = res.body;

                    expect(body.code).to.be.equal(400);
                    expect(body.errors.length).to.be.equal(2);
                    expect(body.errors[0]).to.be.eql({
                        code: 422,
                        title: 'Invalid request parameter',
                        description: 'Missing input_1 parameter'
                    });
                    expect(body.errors[1]).to.be.eql({
                        code: 422,
                        title: 'Invalid request parameter',
                        description: 'Missing input_2 parameter'
                    });
                })
                .expect(400, done);
        });
    });

});